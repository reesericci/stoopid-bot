"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationCommandOptionBuilder = exports.SubcommandGroupBuilder = exports.SubcommandBuilder = exports.CommandBuilder = void 0;
const structures_1 = require("./structures");
class CommandBuilder {
    constructor() {
        this.options = [];
    }
    setName(name) {
        if (name.length < 3 || name.length > 32) {
            throw new Error("Command names must be between 3 and 32 characters");
        }
        this.name = name;
        return this;
    }
    setDescription(description) {
        if (description.length < 1 || description.length > 100) {
            throw new Error("Command descriptions must be between 1 and 100 characters");
        }
        this.description = description;
        return this;
    }
    addOption(option) {
        this.options.push(option);
        return this;
    }
    build() {
        return {
            name: this.name,
            description: this.description,
            options: this.options,
        };
    }
}
exports.CommandBuilder = CommandBuilder;
class SubcommandBuilder {
    constructor() {
        this.type = structures_1.ApplicationCommandOptionType.SUB_COMMAND;
        this.options = [];
    }
    setName(name) {
        if (name.length < 3 || name.length > 32) {
            throw new Error("Subcommand names must be between 3 and 32 characters");
        }
        this.name = name;
        return this;
    }
    setDescription(description) {
        if (description.length < 1 || description.length > 100) {
            throw new Error("Subcommand descriptions must be between 1 and 100 characters");
        }
        this.description = description;
        return this;
    }
    setDefault(def) {
        this.default = def;
        return this;
    }
    setRequired(required) {
        this.required = required;
        return this;
    }
    addOption(option) {
        if (option.type === structures_1.ApplicationCommandOptionType.SUB_COMMAND ||
            option.type === structures_1.ApplicationCommandOptionType.SUB_COMMAND_GROUP) {
            throw new Error("Subcommands can not have subcommands or subcommand groups as options");
        }
        this.options.push(option);
        return this;
    }
    build() {
        return Object.assign({}, this);
    }
}
exports.SubcommandBuilder = SubcommandBuilder;
class SubcommandGroupBuilder {
    constructor() {
        this.type = structures_1.ApplicationCommandOptionType.SUB_COMMAND_GROUP;
        this.options = [];
    }
    setName(name) {
        if (name.length < 3 || name.length > 32) {
            throw new Error("Group names must be between 3 and 32 characters");
        }
        this.name = name;
        return this;
    }
    setDescription(description) {
        if (description.length < 1 || description.length > 100) {
            throw new Error("Group descriptions must be between 1 and 100 characters");
        }
        this.description = description;
        return this;
    }
    setDefault(def) {
        this.default = def;
        return this;
    }
    setRequired(required) {
        this.required = required;
        return this;
    }
    addOption(option) {
        if (option.type !== structures_1.ApplicationCommandOptionType.SUB_COMMAND) {
            throw new Error("Children of subcommand groups must be subcommands");
        }
        this.options.push(option);
        return this;
    }
    build() {
        return Object.assign({}, this);
    }
}
exports.SubcommandGroupBuilder = SubcommandGroupBuilder;
class ApplicationCommandOptionBuilder {
    constructor() {
        this.choices = [];
    }
    setType(type) {
        this.type = type;
        return this;
    }
    setName(name) {
        if (name.length < 3 || name.length > 32) {
            throw new Error("Option names must be between 3 and 32 characters");
        }
        this.name = name;
        return this;
    }
    setDescription(description) {
        if (description.length < 1 || description.length > 100) {
            throw new Error("Option descriptions must be between 1 and 100 characters");
        }
        this.description = description;
        return this;
    }
    setDefault(def) {
        this.default = def;
        return this;
    }
    setRequired(required) {
        this.required = required;
        return this;
    }
    addChoice(choice) {
        this.choices.push(choice);
        return this;
    }
    build() {
        return Object.assign({}, this);
    }
}
exports.ApplicationCommandOptionBuilder = ApplicationCommandOptionBuilder;
